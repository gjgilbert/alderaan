import os
import sys
import warnings

import numpy as np
from alderaan.modules.transit_model import TTimeTransitModel

def run(context):
    print('\n\nSUBRECIPE: QUICK FIT TRANSIT TIMES\n')

    # infer context
    planets = context.planets
    litecurve = context.litecurve
    limbdark = context.limbdark

    # fit transit times
    print("Fitting independent transit times")
    ttvmodel = TTimeTransitModel(litecurve, planets, limbdark)

    for n, p in enumerate(planets):
        print(f"\nPlanet {n} : fitting {np.sum(p.ephemeris.quality)} transit times")

        ttime_old, ttime_err_old = p.ephemeris.ttime, p.ephemeris.error
        ttime_new, ttime_err_new = ttvmodel.mazeh13_holczer16_method(n, target=context.target, quicklook_dir=context.quicklook_dir)

        assert len(ttime_new) == len(ttime_old)
        assert len(ttime_err_new) == len(ttime_err_old)

        _nfit = np.sum(~np.isnan(ttime_new))
        _ntot = np.sum(p.ephemeris.quality)

        print(f"Planet {n} : {_nfit} of {_ntot} transit times ({_nfit / _ntot * 100:.1f}%) fit successfully")
        
        p.ephemeris.ttime = ttime_new.copy()
        p.ephemeris.error = ttime_err_new.copy()
        p.ephemeris.quality = ~np.isnan(ttime_new) & ~np.isnan(ttime_err_new)

        planets[n].update_ephemeris(p.ephemeris.interpolate())

    return {'planets': planets}