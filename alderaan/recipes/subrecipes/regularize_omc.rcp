import os
import sys
import warnings

from astropy.stats import mad_std
import numpy as np

from alderaan.modules.omc import OMC
from alderaan.modules.quicklook import plot_omc


def run(context, do_periodic=True):
    print('\n\nSUBRECIPE: REGULARIZE OMC\n')

    # infer context
    NPL = context.NPL
    target = context.target
    planets = context.planets

    # initialize OMC object for each planet
    omc_list = []
    for n, p in enumerate(planets):
        omc_list.append(OMC(p.ephemeris))

    # search for period signals
    if do_periodic:
        if NPL == 1:
            critical_fap = 0.1
        elif NPL > 1:
            critical_fap = 0.99

        freq = [None]*NPL
        fap = [None]*NPL

        for n, p in enumerate(planets):
            freq[n], fap[n] = omc_list[n].identify_significant_frequencies(critical_fap)

        # single planet systems : use direct search output (FAP < 0.1)
        if NPL == 1:
            pass

        # multiplanet systems : compare marginal frequencies to find close matches
        if NPL > 1:
            close = np.zeros((NPL,NPL), dtype=bool)

            for i in range(NPL):
                df_min = 1 / (planets[i].ephemeris.ttime.max() - planets[i].ephemeris.ttime.min())
                
                for j in range(i+1, NPL):
                    df_ij = np.abs(freq[i] - freq[j])
                    
                    if df_ij < df_min:
                        close[i,j] = True
                        close[j,i] = True

            for i in range(NPL):
                if not np.any(close[i]) and fap[i] > 0.1:
                    freq[i] = None
                    fap[i] = None

        freq
        fap
            



    # fit a regularized model
    for n, p in enumerate(planets):
        omc = omc_list[n]
        npts = np.sum(omc.quality)

        _original_period = np.copy(p.period)

        # Matern-3/2 model | don't use GP on very noisy data
        if (npts >= 8) & (np.median(omc.yerr) <= 0.5 * mad_std(omc.yobs)):
            with warnings.catch_warnings(record=True) as catch:
                warnings.simplefilter('always', category=RuntimeWarning)
                trace = omc.sample(omc.matern32_model())

        # Polynomial model | require 2^N transits
        else:
            polyorder = np.max([1, np.min([3, int(np.log2(npts))-1])])
            with warnings.catch_warnings(record=True) as catch:
                warnings.simplefilter('always', category=RuntimeWarning)
                trace = omc.sample(omc.poly_model(polyorder))

        if len(catch) > 0:
            print(f"{len(catch)} RuntimeWarnings caught during sampling")

        # update ephemeris
        omc.ymod = np.nanmedian(trace['pred'], 0)
        omc_list[n] = omc

        p.ephemeris = p.ephemeris.update_from_omc(omc)
        p.ephemeris = p.ephemeris.interpolate(full=True)
        planets[n] = p.update_ephemeris(p.ephemeris)

        # make quicklook plot
        _filepath = os.path.join(context.quicklook_dir, f"{target}_omc_initial.png")
        _ = plot_omc(omc_list, target, _filepath)

        print(f"Planet {n} : {_original_period:.6f} --> {planets[n].period:.6f}")

    # PyMC3 does not play well with automatic context capture; do manual capture
    return {'planets': planets}
