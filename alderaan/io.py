# import relevant modules
import numpy as np
import csv
import sys
import os
import lightkurve as lk
from   astropy.io import fits as pyfits
import pymc3 as pm

from .constants import *
from .LiteCurve import *


__all__ = ["read_csv_file",
           "get_csv_data",
           "read_sim_fits",
           "load_detrended_lightcurve",
           "trace_to_hdulist"]


def read_csv_file(filename, k_index=0, v_index=1):
    """
    Read a csv file and return keys and values for use in a dictionary
    
    Parameters
    ----------
    filename : string
        csv file
    k_index : int
        index where keys start
    v_index: int
        index where values start
        
    Returns
    -------
        keys : list of keys
        values : list of values
    """
    data = []
    with open(filename) as infile:
        reader = csv.reader(infile)

        for row in reader:
            data.append(row)

        keys   = data[k_index]
        values = data[v_index:]

        return keys, values


    
def get_csv_data(keyname, keys, values):
    """
    Put the keys and values outputs of read_csv_file() into a useable format
    
    Parameters
    ----------
    keyname : string
        column definition
    keys : list
        keys
    values : list
        values corresponding to each key
    """
    kid = keys.index(keyname)
    
    outdata = []
    for row in values:
        outdata.append(row[kid])
    
    return outdata



def read_sim_fits(filename):
    """
    Read in simulated data from a .fits file
    The input to this funciton is the output of 'simulate_lightcurve.py'
    
    Parameters
    ----------
    filename : str
        path to target .fits file
    
    Returns
    -------
    data : lk.KeplerLightCurve
        lightkurve object constaining relevant data
    """
    with pyfits.open(filename) as hdulist:
        header = hdulist[0].header
        
        data = lk.KeplerLightCurve(time = hdulist['time'].data, \
                                   flux = hdulist['flux'].data, \
                                   flux_err = hdulist['error'].data, \
                                   cadenceno = hdulist['cadno'].data, \
                                   quality = hdulist['quality'].data, \
                                   quarter = header['QUARTER'], \
                                   channel = header['CHANNEL'], \
                                   targetid = header['KIC'], \
                                   quality_bitmask = 'default')
        
        return data



def load_detrended_lightcurve(filename):
    """
    Load a fits file previously generated by LiteCurve.to_fits()
    
    Parameters
    ----------
        filename : string
    
    Returns
    -------
        litecurve : LiteCurve() object
    
    """     
    litecurve = LiteCurve() 
    
    with pyfits.open(filename) as hdulist:

        litecurve.time = np.array(hdulist['TIME'].data, dtype='float64')
        litecurve.flux = np.array(hdulist['FLUX'].data, dtype='float64')
        litecurve.error = np.array(hdulist['ERROR'].data, dtype='float64')
        litecurve.cadno = np.array(hdulist['CADNO'].data, dtype='int')
        litecurve.quarter = np.array(hdulist['QUARTER'].data, dtype='int')
        litecurve.channel = np.array(hdulist['CHANNEL'].data, dtype='int')
        litecurve.centroid_col = np.array(hdulist['CENT_COL'].data, dtype='int')
        litecurve.centroid_row = np.array(hdulist['CENT_ROW'].data, dtype='int')
        litecurve.mask = np.asarray(hdulist['MASK'].data, dtype='bool')
        
    return litecurve    
    
    

def trace_to_hdulist(trace, varnames, target):
    """
    Convert a PyMC3 multitrace object into a pyfits.HDUList
    Each PyMC3 variable will be assigned to its own extension as a pyfits.ImageHDU
    
    Parameters
    ----------
    trace : PyMC3 multitrace
        output of pm.sample
    varnames : list
        list of variable names from the trace that you wish to save
    target : string
        name of target
        
    Returns
    -------
    hdulist : HDUList
        pyfits (astropy.io.fits) object with each variable from trace saved as and ImageHDU
    """  
    # make primary HDU
    primary_hdu = pyfits.PrimaryHDU()

    header = primary_hdu.header

    header['TARGET']  = target
    header['NCHAINS'] = trace.nchains

    primary_hdu.header = header
    
    # add it to HDU list
    hdulist = []
    hdulist.append(primary_hdu)
    
    # add all samples from trace
    for i, vn in enumerate(varnames):
        hdulist.append(pyfits.ImageHDU(trace[vn], name=vn))
    
    return pyfits.HDUList(hdulist)